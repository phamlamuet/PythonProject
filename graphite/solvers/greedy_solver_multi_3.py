import asyncio
import random
import time
from typing import List, Union

import numpy as np
from matplotlib import colors as mcolors
import matplotlib.pyplot as plt

from graphite.data.dataset_utils import load_default_dataset
from graphite.data.distance import geom_edges, euc_2d_edges, man_2d_edges
from graphite.protocol import GraphV2Problem, GraphV2ProblemMulti, GraphV2ProblemMultiConstrained, GraphV2Synapse
from graphite.solvers.base_solver import BaseSolver
from graphite.utils.graph_utils import get_multi_minmax_tour_distance


def visualize_mdcvrp(node_coords, depots, tours, title="Multi-Depot Capacitated Vehicle Routing Solution"):
    plt.figure(figsize=(12, 10))

    # Get a list of colors for the tours
    colors = list(mcolors.TABLEAU_COLORS.values())

    # Plot the nodes
    plt.scatter(node_coords[:, 0], node_coords[:, 1], c='lightgray', s=30, zorder=1)

    # Plot the depots with larger markers
    for i, depot in enumerate(depots):
        plt.scatter(node_coords[depot, 0], node_coords[depot, 1],
                    c=colors[i % len(colors)], s=200, marker='*', edgecolors='black', zorder=3,
                    label=f"Depot {depot}")

    # Plot each tour with a different color
    for i, tour in enumerate(tours):
        color = colors[i % len(colors)]
        tour_coords = np.array([node_coords[node] for node in tour])

        # Plot the tour lines
        for j in range(len(tour) - 1):
            plt.plot([tour_coords[j, 0], tour_coords[j + 1, 0]],
                     [tour_coords[j, 1], tour_coords[j + 1, 1]],
                     c=color, linewidth=1.5, alpha=0.7, zorder=2)

    # Node indices removed for clarity

    plt.title(title)
    plt.legend(loc='upper right')
    plt.grid(True, alpha=0.3)
    plt.tight_layout()

    return plt


def generate_hexaly_input_file(filename: str, n_nodes: int, m: int, depots: list,
                               demand: list, constraint: list, node_coords: np.ndarray):
    """
    Generate a Hexaly input file for MDVRP based on solver data.

    Args:
        filename (str): Output file path (e.g., 'mdvrp_input.txt').
        n_nodes (int): Total number of nodes (customers + depots).
        m (int): Number of salesmen (vehicles), assumed as total across depots.
        depots (list): List of depot indices.
        demand (list): List of demands per node (0 for depots).
        constraint (list): List of vehicle capacities per depot.
        node_coords (np.ndarray): Array of [x, y] coordinates for all nodes.
    """
    # Calculate problem parameters
    t = len(depots)  # Number of depots
    n = n_nodes - t  # Number of customers
    vehicles_per_depot = max(1, m // t)  # Distribute vehicles; adjust as needed
    m_total = vehicles_per_depot * t  # Total vehicles

    # Open file for writing
    with open(filename, 'w') as f:
        # First line: type m n t
        f.write(f"2 {m_total} {n} {t}\n")

        # Depot lines: D Q (one per depot)
        for i, depot_capacity in enumerate(constraint):
            f.write(f"0 {depot_capacity}\n")  # D = 0 (no duration limit), Q = capacity

        # Customer and depot data lines: i x y d q f a list e l
        customer_id = 1
        for i in range(n_nodes):
            if i in depots:
                continue  # Skip depots for now, add them at the end
            x, y = node_coords[i]
            q = demand[i]
            # i: customer number (1-based), d = 0, f = 1, a = 0, list = 0, e = 0, l = 1000
            f.write(f"{customer_id} {x} {y} 0 {q} 1 0 0 0 1000\n")
            customer_id += 1

        # Add depots at the end (n+1 to n+t)
        for j, depot_idx in enumerate(depots, start=n + 1):
            x, y = node_coords[depot_idx]
            q = demand[depot_idx]  # Should be 0, as set in your code
            f.write(f"{j} {x} {y} 0 {q} 1 0 0 0 1000\n")

    print(f"Hexaly input file generated: {filename}")

class NearestNeighbourMultiSolver3(BaseSolver):
    '''
    This solver is a constructive nearest_neighbour algorithm that assigns cities to subtours based on the min increase in objective function value.
    '''
    def __init__(self, problem_types:List[GraphV2Problem]=[GraphV2ProblemMultiConstrained()]):
        super().__init__(problem_types=problem_types)
    
    def get_random_valid_start(self, depot_id, distance_matrix, taken_nodes:list[int]=[], selection_range:int=5) -> int:
        distances = [(city_id, distance) for city_id, distance in enumerate(distance_matrix[depot_id].copy())]
        # reverse sort the copied list and pop from it
        assert (selection_range + len(taken_nodes)) < len(distances)
        distances.sort(reverse=True, key=lambda x: x[1])
        closest_cities = []
        while len(closest_cities) < selection_range:
            selected_city = None
            while not selected_city:
                city_id, distance = distances.pop()
                if city_id not in taken_nodes:
                    selected_city = city_id
            closest_cities.append(selected_city)
        return random.choice(closest_cities)
        
    def get_starting_tours(self, depots, distance_matrix):
        taken_nodes = depots.copy()
        initial_incomplete_tours = []
        for depot in depots:
            first_visit = self.get_random_valid_start(depot, distance_matrix, taken_nodes)
            initial_incomplete_tours.append([depot, first_visit])
            taken_nodes.append(first_visit)
        return initial_incomplete_tours
    
    async def solve(self, formatted_problem, future_id:int)->List[int]:
        def subtour_distance(distance_matrix, subtour):
            subtour = np.array(subtour)
            next_points = np.roll(subtour, -1) 
            distances = distance_matrix[subtour, next_points] 
            total_distance = np.sum(distances)
            return total_distance
        
        # construct m tours
        m = formatted_problem.n_salesmen
        distance_matrix = np.array(formatted_problem.edges)
        unvisited = [city for city in range(len(distance_matrix)) if city not in set(formatted_problem.depots)]
        tours = self.get_starting_tours(formatted_problem.depots, distance_matrix)

        for _, first_city in tours:
            unvisited.remove(first_city)

        distances = [subtour_distance(distance_matrix, subtour) for subtour in tours]
        constraints = formatted_problem.constraint # List of constraints per salesman

        while unvisited:
            # print("TOUR LENS", [len(tour) for tour in tours])
            chosen_index = distances.index(min(distances))
            chosen_subtour = tours[chosen_index]

            min_distance = np.inf
            chosen_city = None
            for city in unvisited:
                new_distance = distances[chosen_index] - distance_matrix[chosen_subtour[-1]][0] + distance_matrix[chosen_subtour[-1]][city] + distance_matrix[city][0]
                if new_distance < min_distance:
                    chosen_city = city
                    min_distance = new_distance
            if chosen_city is not None and chosen_city in unvisited:
                distances[chosen_index] = min_distance
                tours[chosen_index] = chosen_subtour + [chosen_city]
                unvisited.remove(chosen_city)

            # Ensure we do not exceed constraint
            if len(tours[chosen_index]) - 1 >= constraints[chosen_index]:  # Exclude depot
                distances[chosen_index] = np.inf
            
        return [tour + [depot] for tour, depot in zip(tours, formatted_problem.depots.copy())] # complete each subtour back to source depot
    
    def problem_transformations(self, problem: Union[GraphV2ProblemMulti]):
        return problem

if __name__=="__main__":
    # runs the solver on a test Metric mTSP
    class Mock:
        def __init__(self) -> None:
            pass        

        def recreate_edges(self, problem: Union[GraphV2Problem, GraphV2ProblemMulti]):
            node_coords_np = self.loaded_datasets[problem.dataset_ref]["data"]
            node_coords = np.array([node_coords_np[i][1:] for i in problem.selected_ids])
            if problem.cost_function == "Geom":
                return geom_edges(node_coords),node_coords
            elif problem.cost_function == "Euclidean2D":
                return euc_2d_edges(node_coords), node_coords
            elif problem.cost_function == "Manhatten2D":
                return man_2d_edges(node_coords), node_coords
            else:
                return "Only Geom, Euclidean2D, and Manhatten2D supported for now."
            
    mock = Mock()
    load_default_dataset(mock)

    n_nodes = 704
    m = 6

    # depots = sorted(random.sample(list(range(n_nodes)), k=m))
    depots = [
      82,
      151,
      186,
      192,
      616,
      656
    ]
    demand = [
      5,
      8,
      8,
      4,
      5,
      3,
      9,
      1,
      1,
      7,
      2,
      4,
      4,
      7,
      7,
      4,
      5,
      5,
      8,
      5,
      2,
      8,
      5,
      6,
      7,
      2,
      9,
      9,
      9,
      4,
      4,
      1,
      7,
      2,
      6,
      5,
      9,
      2,
      8,
      8,
      9,
      4,
      6,
      4,
      4,
      4,
      5,
      8,
      9,
      2,
      5,
      4,
      6,
      9,
      6,
      6,
      9,
      1,
      7,
      4,
      3,
      9,
      9,
      5,
      7,
      7,
      6,
      8,
      9,
      9,
      2,
      8,
      8,
      8,
      8,
      9,
      5,
      3,
      4,
      3,
      2,
      9,
      0,
      5,
      6,
      3,
      1,
      8,
      4,
      2,
      8,
      7,
      7,
      9,
      6,
      5,
      8,
      9,
      7,
      6,
      5,
      3,
      4,
      2,
      4,
      9,
      2,
      6,
      4,
      1,
      6,
      5,
      8,
      2,
      1,
      5,
      6,
      6,
      5,
      8,
      9,
      6,
      8,
      4,
      5,
      8,
      8,
      8,
      9,
      5,
      3,
      8,
      2,
      6,
      5,
      4,
      5,
      4,
      6,
      4,
      2,
      3,
      5,
      1,
      6,
      8,
      8,
      9,
      9,
      8,
      5,
      0,
      1,
      1,
      6,
      7,
      8,
      6,
      7,
      9,
      1,
      2,
      3,
      3,
      4,
      5,
      5,
      3,
      1,
      8,
      5,
      4,
      2,
      3,
      2,
      5,
      6,
      5,
      5,
      7,
      3,
      8,
      5,
      2,
      5,
      9,
      0,
      6,
      1,
      9,
      5,
      9,
      0,
      4,
      4,
      9,
      3,
      9,
      6,
      7,
      4,
      1,
      7,
      5,
      6,
      1,
      8,
      8,
      8,
      2,
      1,
      3,
      3,
      3,
      2,
      5,
      8,
      8,
      7,
      9,
      7,
      9,
      6,
      9,
      6,
      4,
      8,
      3,
      4,
      5,
      3,
      4,
      5,
      1,
      9,
      6,
      9,
      4,
      2,
      7,
      7,
      5,
      9,
      5,
      9,
      2,
      9,
      8,
      5,
      6,
      2,
      6,
      1,
      5,
      5,
      6,
      9,
      4,
      3,
      7,
      2,
      9,
      5,
      7,
      8,
      4,
      3,
      1,
      5,
      3,
      8,
      3,
      6,
      7,
      2,
      4,
      2,
      9,
      6,
      8,
      3,
      8,
      9,
      5,
      5,
      6,
      7,
      2,
      1,
      9,
      4,
      9,
      3,
      1,
      4,
      4,
      2,
      5,
      9,
      7,
      7,
      6,
      6,
      5,
      3,
      6,
      3,
      6,
      7,
      9,
      5,
      3,
      7,
      8,
      7,
      9,
      6,
      3,
      8,
      5,
      6,
      8,
      8,
      5,
      1,
      2,
      3,
      8,
      6,
      8,
      4,
      7,
      6,
      9,
      9,
      5,
      4,
      6,
      3,
      8,
      6,
      3,
      2,
      9,
      1,
      8,
      2,
      1,
      7,
      1,
      2,
      7,
      5,
      2,
      9,
      2,
      4,
      2,
      1,
      2,
      2,
      3,
      7,
      4,
      9,
      8,
      7,
      2,
      4,
      6,
      3,
      8,
      4,
      7,
      9,
      3,
      7,
      4,
      7,
      1,
      2,
      7,
      5,
      3,
      3,
      5,
      6,
      4,
      9,
      4,
      7,
      3,
      4,
      2,
      3,
      4,
      7,
      8,
      4,
      2,
      7,
      5,
      5,
      5,
      1,
      9,
      3,
      9,
      7,
      2,
      9,
      7,
      3,
      7,
      7,
      9,
      9,
      1,
      3,
      8,
      2,
      2,
      6,
      2,
      5,
      9,
      5,
      3,
      5,
      4,
      7,
      4,
      3,
      4,
      5,
      4,
      7,
      9,
      1,
      7,
      4,
      6,
      7,
      7,
      6,
      5,
      3,
      8,
      5,
      4,
      6,
      5,
      5,
      2,
      8,
      5,
      6,
      6,
      5,
      9,
      3,
      4,
      6,
      4,
      9,
      8,
      5,
      1,
      4,
      6,
      2,
      2,
      4,
      7,
      5,
      4,
      7,
      5,
      7,
      6,
      2,
      8,
      5,
      5,
      1,
      7,
      3,
      4,
      9,
      3,
      4,
      1,
      1,
      9,
      1,
      1,
      6,
      5,
      2,
      4,
      3,
      9,
      2,
      2,
      1,
      5,
      4,
      8,
      5,
      9,
      5,
      5,
      1,
      7,
      8,
      4,
      6,
      4,
      9,
      4,
      9,
      8,
      4,
      7,
      6,
      9,
      4,
      3,
      7,
      8,
      2,
      8,
      9,
      2,
      8,
      5,
      8,
      7,
      9,
      6,
      6,
      3,
      3,
      7,
      1,
      3,
      1,
      5,
      9,
      1,
      9,
      2,
      3,
      6,
      9,
      2,
      1,
      8,
      9,
      4,
      7,
      4,
      3,
      3,
      4,
      9,
      6,
      4,
      6,
      4,
      2,
      9,
      2,
      3,
      2,
      8,
      7,
      2,
      7,
      2,
      3,
      7,
      3,
      3,
      6,
      5,
      4,
      6,
      8,
      5,
      8,
      7,
      6,
      8,
      4,
      3,
      1,
      1,
      9,
      5,
      4,
      5,
      8,
      5,
      3,
      2,
      7,
      2,
      2,
      2,
      2,
      7,
      7,
      9,
      8,
      5,
      0,
      3,
      2,
      3,
      1,
      6,
      3,
      5,
      5,
      8,
      9,
      3,
      4,
      4,
      8,
      7,
      9,
      9,
      6,
      8,
      5,
      1,
      4,
      9,
      6,
      2,
      8,
      8,
      7,
      1,
      6,
      1,
      4,
      6,
      7,
      6,
      6,
      9,
      9,
      6,
      0,
      9,
      1,
      2,
      8,
      1,
      7,
      6,
      3,
      6,
      9,
      9,
      7,
      4,
      2,
      3,
      7,
      7,
      3,
      5,
      9,
      3,
      2,
      4,
      8,
      2,
      3,
      3,
      5,
      6,
      6,
      7,
      8,
      1,
      6,
      2,
      8,
      6,
      5,
      3,
      4,
      9,
      5,
      4,
      7,
      7,
      9,
      8
    ]
    for depot in depots:
        demand[depot] = 0

    constraint = [
      667,
      692,
      656,
      542,
      641,
      652
    ]
    selected_id = [500425, 1625897, 490551, 1092293, 694974, 1659784, 38084, 980742, 35263, 259400, 625070, 1692201, 1372979, 139632, 1347807, 538688, 931212, 1293642, 1291895, 868794, 1695385, 152471, 978155, 1729442, 484887, 1259227, 1483587, 1299620, 1566779, 185835, 1231959, 1503799, 226988, 568001, 487111, 1033144, 1506215, 1259832, 1057244, 712724, 476357, 275654, 160660, 436147, 386784, 1172275, 417825, 841506, 1623433, 91017, 964333, 736847, 345764, 1644892, 585551, 168662, 863522, 610924, 528679, 249005, 1462402, 1154925, 986249, 1071905, 789599, 658969, 846492, 1284519, 1874299, 652515, 1816999, 764699, 1857808, 1369220, 830223, 715354, 681010, 1812826, 1512450, 1541743, 513441, 822501, 1271946, 179250, 56554, 1323045, 1197574, 160752, 542466, 995394, 756951, 1689796, 1199708, 1323210, 1065894, 1660996, 815487, 1698023, 1091915, 328697, 1581621, 580263, 1543872, 1193135, 1618873, 289848, 753465, 64443, 149537, 964900, 1735138, 758229, 841784, 315221, 240242, 429432, 121513, 1657618, 482704, 1053343, 1030252, 1290671, 690317, 1110518, 1237350, 1470312, 1583032, 1350807, 1724517, 653015, 1562666, 812748, 846779, 134580, 1694500, 637247, 699169, 717397, 830741, 1741843, 508675, 1704658, 138033, 607915, 65044, 712379, 731941, 123461, 1115557, 856231, 971282, 1773641, 352481, 777987, 1025510, 85623, 250760, 759523, 1648739, 344512, 1885434, 355337, 1830741, 377341, 169521, 1429719, 780979, 227257, 824162, 1084354, 1613292, 1171924, 1166502, 1824735, 1384576, 1060654, 537732, 1802378, 768688, 542960, 1009605, 457297, 398125, 979598, 1901965, 1524264, 329650, 828241, 709576, 877251, 600718, 612449, 1164670, 522205, 1830844, 559664, 1681341, 1451298, 794179, 1747060, 1838057, 1577563, 1382397, 1033807, 1806166, 631770, 186567, 728934, 1610045, 513355, 1037454, 780437, 75466, 1860619, 1865652, 1624028, 988500, 1665660, 1837297, 1339930, 367523, 432601, 1867681, 1315416, 716476, 589549, 197815, 1674950, 845717, 1064804, 290035, 1661371, 679076, 299143, 814655, 813665, 1325901, 1126244, 1011364, 1810682, 864924, 1870672, 1552165, 1779361, 1260990, 1576749, 718896, 1383619, 549506, 1158400, 7660, 383170, 120919, 1145629, 698690, 701443, 814049, 212924, 425159, 1737403, 826609, 1176789, 1888160, 288371, 1793469, 117017, 511903, 1514226, 424352, 913847, 597840, 233800, 1697179, 1705920, 1188014, 1770267, 127396, 1720489, 741733, 1434802, 1192138, 1393810, 1137676, 239480, 434843, 955670, 658977, 1267359, 972358, 673117, 949224, 1129055, 1689777, 572086, 345399, 1658395, 17223, 618772, 638877, 1804793, 113234, 1131431, 492262, 1725062, 1846931, 770975, 1320879, 1464957, 1431565, 1140475, 1649489, 615171, 363454, 594882, 1783190, 1496145, 1788770, 1649814, 1843852, 407090, 1315599, 87418, 1588381, 178006, 1717457, 740499, 1463084, 272627, 497999, 1453458, 825732, 1314355, 1462442, 1647564, 2722, 1489508, 424112, 1147502, 612493, 700940, 1817437, 1257501, 459779, 581484, 1052022, 339207, 1649860, 1475166, 1004285, 827633, 945679, 1524954, 1387550, 437430, 1253282, 395857, 166571, 315313, 459257, 1328143, 697463, 1275997, 580064, 1875890, 10587, 908345, 1121905, 191512, 1577166, 1562186, 1778241, 744394, 508058, 1132337, 1699690, 1101481, 742411, 1228415, 441621, 1366096, 1487361, 1596470, 644655, 479645, 1101770, 640016, 111439, 880964, 1393928, 1508481, 257692, 299227, 1447590, 1691296, 637719, 1731229, 1681582, 1476890, 1778263, 271204, 1591675, 609244, 418180, 1685654, 969944, 965700, 1411415, 1614302, 428827, 579577, 987725, 839117, 1728269, 422479, 693853, 726929, 139146, 1659620, 1509165, 1415818, 393997, 981214, 74302, 668027, 1065043, 467919, 1188270, 1340506, 1230002, 817258, 389134, 1509448, 143130, 1360016, 1116101, 1281833, 161321, 1244551, 1273464, 446704, 949836, 1774854, 557455, 1115289, 1088075, 853224, 658418, 1813164, 679587, 268879, 1108497, 357870, 1468668, 1237386, 1809713, 844390, 424062, 30963, 1064530, 1700778, 1608468, 1708687, 1680694, 633424, 298341, 780232, 681469, 292854, 570986, 1723366, 462140, 1566732, 1849801, 934835, 553105, 554572, 142879, 1198493, 1467340, 1462303, 1871358, 949530, 1569090, 1032875, 715659, 1058318, 1490229, 594155, 694730, 458588, 1693983, 1839411, 1659437, 952056, 267193, 907192, 1512115, 1600829, 1607592, 472556, 1804295, 1579733, 196266, 807411, 1751084, 328242, 468318, 1133176, 1514270, 1318347, 1543180, 1665701, 91439, 744085, 1735562, 205397, 324965, 1246875, 754228, 1795961, 743602, 943705, 1822255, 230426, 628772, 517994, 117365, 1234010, 1469701, 388443, 994354, 1749520, 1240688, 1466182, 1418152, 1902568, 319447, 327242, 1282315, 686276, 1645748, 1067868, 849281, 506661, 1375222, 1093100, 1304487, 1802359, 1394947, 339973, 1443535, 1228039, 888577, 1631629, 1447229, 1795212, 978971, 78080, 1704486, 538230, 1866223, 1330460, 982747, 751219, 1109474, 1219146, 470973, 222320, 1033208, 402960, 150010, 1652578, 1856592, 1302426, 701069, 319296, 1016208, 1460805, 1359892, 1857717, 1652109, 1362268, 364166, 711494, 35511, 1631186, 756755, 90051, 1023917, 332667, 1737121, 1673058, 1101600, 1299872, 85095, 1079963, 747423, 1528856, 1875404, 740985, 1412183, 1678692, 262445, 618584, 1413680, 1034669, 96627, 745668, 1328297, 1764619, 53807, 1026979, 80983, 298251, 895338, 956149, 92167, 180909, 711818, 1256928, 1128895, 1430325, 110799, 1230503, 188602, 212489, 1726185, 1862431, 567939, 425482, 1385363, 1170248, 1264274, 1591379, 1054896, 870602, 1151064, 1884712, 638375, 538132, 962560, 972360, 1892082, 1321428, 1440388, 499358, 1897652, 1593700, 1089279, 1352924, 1758915, 409580, 272390, 489895, 695086, 112453, 86543, 1492378, 1803206, 1201672, 1588323, 487562, 552816, 1303891, 1574949, 1773482, 407751, 451283, 93025, 1286191, 118214, 1623507, 966951, 924297, 1205294, 1281571, 1447246, 1062401, 1056994, 1084574, 792133, 310994, 30621, 699023, 1210236, 1740527, 1755757, 94234, 287248, 1744779, 1042674, 938926, 746428, 1512658, 1332216, 808971, 266358, 1441387, 789998, 1445202, 76895, 999575, 830672, 469625]
    test_problem = GraphV2ProblemMultiConstrained(problem_type="Metric cmTSP", 
                                            n_nodes=n_nodes, 
                                            selected_ids=selected_id,
                                            cost_function="Geom", 
                                            dataset_ref="World_TSP",
                                            n_salesmen=m, 
                                            depots=depots, 
                                            single_depot=False,
                                            demand=demand,
                                            constraint=constraint)
    test_problem.edges,node_coords = mock.recreate_edges(test_problem)

    print("depots", depots)
    print("constraints", constraint, sum(constraint), n_nodes, sum(constraint) >= n_nodes)

    print("Running NNMS3")
    solver1 = NearestNeighbourMultiSolver3(problem_types=[test_problem])
    start_time = time.time()
    routes = asyncio.run(solver1.solve_problem(test_problem))
    test_synapse = GraphV2Synapse(problem = test_problem, solution = routes)
    score1 = get_multi_minmax_tour_distance(test_synapse)

    print(f"{solver1.__class__.__name__} Time Taken for {n_nodes} Nodes: {time.time()-start_time} and Salesmen: {m}")
    print(f"Dummy scored: {score1}")
    print("len of dummy routes", [len(route) for route in routes])
    [print(route) for route in routes]

    plt = visualize_mdcvrp(node_coords, depots, routes, title="dummy solution")
    plt.show()

    #try to create hexaly input file here

    generate_hexaly_input_file(
        filename="mdvrp_input.txt",
        n_nodes=n_nodes,
        m=m,
        depots=depots,
        demand=demand,
        constraint=constraint,
        node_coords=node_coords
    )

    best_routes = [
      [
        82,
        177,
        162,
        70,
        555,
        500,
        609,
        650,
        398,
        447,
        370,
        665,
        689,
        590,
        626,
        558,
        601,
        591,
        531,
        686,
        412,
        469,
        199,
        23,
        514,
        128,
        5,
        158,
        117,
        48,
        208,
        215,
        498,
        1,
        407,
        346,
        217,
        492,
        490,
        461,
        303,
        395,
        299,
        522,
        200,
        472,
        218,
        340,
        239,
        264,
        243,
        441,
        97,
        11,
        462,
        317,
        333,
        53,
        400,
        482,
        501,
        201,
        497,
        170,
        647,
        510,
        380,
        478,
        236,
        93,
        223,
        27,
        675,
        573,
        538,
        623,
        434,
        485,
        63,
        282,
        237,
        121,
        532,
        354,
        17,
        435,
        428,
        377,
        561,
        341,
        438,
        25,
        578,
        38,
        22,
        445,
        542,
        684,
        14,
        381,
        545,
        120,
        690,
        350,
        348,
        576,
        89,
        183,
        50,
        640,
        611,
        678,
        82
      ],
      [
        151,
        318,
        560,
        214,
        68,
        598,
        72,
        204,
        374,
        141,
        580,
        511,
        403,
        310,
        540,
        95,
        31,
        347,
        621,
        554,
        676,
        479,
        26,
        693,
        125,
        60,
        335,
        496,
        242,
        368,
        597,
        471,
        130,
        28,
        185,
        508,
        78,
        267,
        533,
        279,
        165,
        308,
        550,
        397,
        657,
        418,
        389,
        486,
        452,
        307,
        644,
        433,
        85,
        649,
        406,
        604,
        581,
        630,
        281,
        73,
        202,
        306,
        669,
        546,
        663,
        632,
        124,
        483,
        56,
        119,
        592,
        530,
        410,
        556,
        662,
        34,
        328,
        439,
        258,
        115,
        529,
        345,
        52,
        327,
        652,
        152,
        163,
        467,
        319,
        378,
        566,
        140,
        442,
        543,
        209,
        628,
        409,
        552,
        679,
        677,
        477,
        527,
        551,
        419,
        699,
        577,
        326,
        36,
        553,
        139,
        77,
        222,
        304,
        572,
        241,
        480,
        627,
        363,
        160,
        262,
        535,
        184,
        646,
        642,
        637,
        213,
        491,
        547,
        314,
        316,
        658,
        454,
        194,
        579,
        173,
        519,
        275,
        151
      ],
      [
        186,
        294,
        161,
        58,
        225,
        188,
        599,
        513,
        563,
        518,
        189,
        269,
        440,
        481,
        421,
        150,
        424,
        634,
        154,
        16,
        149,
        260,
        235,
        256,
        211,
        586,
        371,
        376,
        145,
        166,
        680,
        429,
        411,
        112,
        228,
        19,
        285,
        521,
        180,
        701,
        229,
        595,
        384,
        253,
        172,
        30,
        287,
        37,
        437,
        67,
        427,
        694,
        352,
        697,
        548,
        664,
        369,
        431,
        332,
        528,
        315,
        79,
        245,
        102,
        351,
        322,
        104,
        671,
        100,
        126,
        660,
        633,
        460,
        295,
        292,
        91,
        571,
        393,
        272,
        459,
        324,
        273,
        134,
        227,
        231,
        585,
        20,
        259,
        685,
        196,
        277,
        396,
        110,
        504,
        417,
        309,
        562,
        643,
        320,
        98,
        62,
        672,
        615,
        365,
        47,
        325,
        423,
        466,
        51,
        224,
        539,
        401,
        54,
        362,
        101,
        468,
        639,
        179,
        88,
        80,
        499,
        470,
        302,
        358,
        589,
        186
      ],
      [
        192,
        565,
        674,
        86,
        631,
        45,
        61,
        507,
        659,
        426,
        375,
        3,
        493,
        495,
        187,
        168,
        178,
        198,
        207,
        692,
        157,
        695,
        305,
        415,
        246,
        484,
        255,
        414,
        360,
        488,
        683,
        463,
        338,
        205,
        382,
        394,
        65,
        286,
        135,
        122,
        129,
        10,
        474,
        525,
        118,
        353,
        46,
        221,
        284,
        41,
        283,
        29,
        114,
        494,
        464,
        357,
        390,
        55,
        42,
        250,
        364,
        687,
        87,
        502,
        226,
        323,
        99,
        569,
        336,
        667,
        176,
        248,
        343,
        76,
        574,
        278,
        520,
        596,
        153,
        465,
        503,
        702,
        349,
        455,
        240,
        344,
        564,
        620,
        337,
        192
      ],
      [
        616,
        557,
        212,
        612,
        584,
        84,
        422,
        610,
        6,
        296,
        682,
        155,
        655,
        416,
        476,
        21,
        164,
        617,
        83,
        257,
        59,
        156,
        449,
        399,
        263,
        688,
        391,
        105,
        516,
        666,
        651,
        342,
        0,
        506,
        40,
        661,
        266,
        703,
        456,
        536,
        113,
        681,
        233,
        537,
        451,
        582,
        505,
        312,
        44,
        430,
        425,
        645,
        383,
        2,
        559,
        15,
        475,
        195,
        234,
        330,
        132,
        7,
        216,
        568,
        274,
        453,
        92,
        517,
        361,
        619,
        593,
        18,
        331,
        509,
        359,
        608,
        219,
        379,
        544,
        12,
        247,
        388,
        534,
        197,
        329,
        392,
        600,
        174,
        127,
        244,
        280,
        171,
        249,
        291,
        458,
        443,
        541,
        66,
        138,
        81,
        106,
        372,
        24,
        549,
        602,
        9,
        696,
        625,
        567,
        523,
        271,
        570,
        116,
        252,
        432,
        526,
        108,
        386,
        606,
        512,
        616
      ],
      [
        656,
        300,
        622,
        147,
        265,
        276,
        133,
        13,
        356,
        367,
        230,
        613,
        575,
        251,
        420,
        43,
        629,
        402,
        413,
        408,
        489,
        182,
        159,
        220,
        355,
        268,
        181,
        653,
        193,
        270,
        33,
        298,
        69,
        254,
        339,
        137,
        618,
        136,
        4,
        289,
        297,
        190,
        446,
        232,
        39,
        71,
        698,
        90,
        146,
        583,
        607,
        111,
        131,
        614,
        169,
        373,
        148,
        94,
        648,
        605,
        238,
        588,
        203,
        444,
        366,
        301,
        261,
        103,
        636,
        123,
        450,
        210,
        175,
        35,
        290,
        473,
        405,
        404,
        288,
        641,
        109,
        691,
        673,
        387,
        635,
        96,
        74,
        64,
        448,
        654,
        75,
        638,
        385,
        487,
        143,
        191,
        311,
        57,
        603,
        524,
        313,
        293,
        167,
        32,
        515,
        624,
        206,
        436,
        142,
        8,
        334,
        457,
        107,
        144,
        700,
        668,
        670,
        587,
        594,
        321,
        49,
        656
      ]]


    print("Best solve NNMS3")
    best_synapse = GraphV2Synapse(problem=test_problem, solution=best_routes)
    score2 = get_multi_minmax_tour_distance(best_synapse)
    print(f"Best scored: {score2}")
    plt = visualize_mdcvrp(node_coords, depots, best_routes, title="best sol")
    plt.show()






    