import asyncio
import random
import time
from typing import List, Union

import numpy as np
from matplotlib import colors as mcolors
import matplotlib.pyplot as plt
import hexaly.optimizer  # Import Hexaly

from graphite.data.dataset_utils import load_default_dataset
from graphite.data.distance import geom_edges, euc_2d_edges, man_2d_edges
from graphite.protocol import GraphV2Problem, GraphV2ProblemMulti, GraphV2ProblemMultiConstrained, GraphV2Synapse
from graphite.solvers.base_solver import BaseSolver
from graphite.utils.graph_utils import get_multi_minmax_tour_distance

# Keep your visualize_mdcvrp function unchanged
def visualize_mdcvrp(node_coords, depots, tours, title="Multi-Depot Capacitated Vehicle Routing Solution"):
    plt.figure(figsize=(12, 10))
    colors = list(mcolors.TABLEAU_COLORS.values())
    plt.scatter(node_coords[:, 0], node_coords[:, 1], c='lightgray', s=30, zorder=1)
    for i, depot in enumerate(depots):
        plt.scatter(node_coords[depot, 0], node_coords[depot, 1],
                    c=colors[i % len(colors)], s=200, marker='*', edgecolors='black', zorder=3,
                    label=f"Depot {depot}")
    for i, tour in enumerate(tours):
        color = colors[i % len(colors)]
        tour_coords = np.array([node_coords[node] for node in tour])
        for j in range(len(tour) - 1):
            plt.plot([tour_coords[j, 0], tour_coords[j + 1, 0]],
                     [tour_coords[j, 1], tour_coords[j + 1, 1]],
                     c=color, linewidth=1.5, alpha=0.7, zorder=2)
    plt.title(title)
    plt.legend(loc='upper right')
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    return plt

# Define a new Hexaly-based solver
class HexalyMultiSolver(BaseSolver):
    def __init__(self, problem_types: List[GraphV2Problem] = [GraphV2ProblemMultiConstrained()], time_limit: int = 180):
        super().__init__(problem_types=problem_types)
        self.time_limit = time_limit

    async def solve(self, formatted_problem, future_id: int) -> List[List[int]]:
        # Extract problem data
        n_nodes = formatted_problem.n_nodes
        depots = formatted_problem.depots
        nb_depots = len(depots)
        nb_customers = n_nodes - nb_depots
        demands_data = formatted_problem.demand
        truck_capacity_data = formatted_problem.constraint
        distance_matrix = np.array(formatted_problem.edges)  # Precomputed distances
        # Map customer indices (excluding depots)
        customer_indices = [i for i in range(n_nodes) if i not in depots]
        depot_to_idx = {depot: i for i, depot in enumerate(depots)}

        # Number of trucks per depot (assume 1 for simplicity, adjust as needed)
        nb_trucks_per_depot = 1
        total_trucks = nb_trucks_per_depot * nb_depots

        # Assume no service time for now
        service_time_data = [0] * nb_customers

        with hexaly.optimizer.HexalyOptimizer() as optimizer:
            model = optimizer.model

            # Sequence of customers visited by each truck from each depot
            customer_sequences = [[model.list(nb_customers) for _ in range(nb_trucks_per_depot)]
                                 for _ in range(nb_depots)]

            # Partition constraint: each customer visited exactly once
            customer_sequences_constraint = [customer_sequences[d][k]
                                            for d in range(nb_depots) for k in range(nb_trucks_per_depot)]
            model.constraint(model.partition(customer_sequences_constraint))

            # Arrays for Hexaly
            demands = model.array([demands_data[i] for i in customer_indices])
            service_time = model.array(service_time_data)
            dist_customers = model.array([[distance_matrix[customer_indices[i]][customer_indices[j]]
                                         for j in range(nb_customers)] for i in range(nb_customers)])

            # Distance from depots to customers
            distance_warehouse = [[distance_matrix[depot][customer_indices[j]]
                                 for j in range(nb_customers)] for depot in depots]
            dist_depot_array = [model.array(dist) for dist in distance_warehouse]

            # Route distances and total distance
            route_distances = [[None for _ in range(nb_trucks_per_depot)] for _ in range(nb_depots)]
            total_distance = model.sum()

            for d in range(nb_depots):
                depot_idx = depots[d]
                for k in range(nb_trucks_per_depot):
                    sequence = customer_sequences[d][k]
                    c = model.count(sequence)

                    # Capacity constraint
                    demand_lambda = model.lambda_function(lambda j: demands[j])
                    route_quantity = model.sum(sequence, demand_lambda)
                    model.constraint(route_quantity <= truck_capacity_data[d])

                    # Distance calculation
                    dist_lambda = model.lambda_function(lambda i: model.at(dist_customers, sequence[i - 1], sequence[i]))
                    route_distances[d][k] = model.sum(model.range(1, c), dist_lambda) + \
                        model.iif(c > 0, dist_depot_array[d][sequence[0]] + dist_depot_array[d][sequence[c - 1]], 0)

                    # Add service time (if applicable)
                    service_lambda = model.lambda_function(lambda j: service_time[j])
                    route_service_time = model.sum(sequence, service_lambda)

                    total_distance.add_operand(route_distances[d][k])

            # Objective: minimize total distance
            model.minimize(total_distance)
            model.close()

            # Set time limit
            optimizer.param.time_limit = self.time_limit

            # Solve
            optimizer.solve()

            # Extract solution
            routes = []
            for d in range(nb_depots):
                depot_idx = depots[d]
                for k in range(nb_trucks_per_depot):
                    customer_list = customer_sequences[d][k].value
                    if customer_list:  # Only include non-empty routes
                        route = [depot_idx] + [customer_indices[cust] for cust in customer_list] + [depot_idx]
                        routes.append(route)

            print(f"Hexaly Objective Value: {total_distance.value}")
            return routes

    def problem_transformations(self, problem: Union[GraphV2ProblemMulti]):
        # Add node_coords to problem for convenience

        return problem

# Update main block to use Hexaly solver
if __name__ == "__main__":
    class Mock:
        def __init__(self) -> None:
            pass

        def recreate_edges(self, problem: Union[GraphV2Problem, GraphV2ProblemMulti]):
            node_coords_np = self.loaded_datasets[problem.dataset_ref]["data"]
            node_coords = np.array([node_coords_np[i][1:] for i in problem.selected_ids])
            if problem.cost_function == "Geom":
                return geom_edges(node_coords), node_coords
            elif problem.cost_function == "Euclidean2D":
                return euc_2d_edges(node_coords), node_coords
            elif problem.cost_function == "Manhatten2D":
                return man_2d_edges(node_coords), node_coords
            else:
                return "Only Geom, Euclidean2D, and Manhatten2D supported for now."

    mock = Mock()
    load_default_dataset(mock)

    n_nodes = 1571
    m = 9
    depots = \
        [
            9,
            44,
            220,
            234,
            521,
            762,
            887,
            1012,
            1318
        ]
    demand = \
        [
            5,
            1,
            4,
            6,
            5,
            7,
            5,
            3,
            6,
            0,
            9,
            2,
            7,
            9,
            3,
            9,
            2,
            7,
            6,
            4,
            4,
            3,
            5,
            8,
            7,
            9,
            4,
            3,
            5,
            5,
            8,
            8,
            3,
            2,
            2,
            4,
            8,
            4,
            7,
            2,
            7,
            7,
            7,
            4,
            0,
            1,
            7,
            7,
            1,
            4,
            1,
            7,
            1,
            8,
            5,
            2,
            8,
            3,
            4,
            4,
            7,
            4,
            8,
            3,
            7,
            1,
            4,
            2,
            6,
            1,
            6,
            3,
            6,
            2,
            8,
            8,
            5,
            6,
            9,
            4,
            7,
            3,
            5,
            2,
            5,
            8,
            7,
            4,
            3,
            6,
            7,
            6,
            5,
            1,
            1,
            4,
            9,
            1,
            5,
            9,
            2,
            2,
            9,
            4,
            8,
            3,
            1,
            5,
            8,
            3,
            9,
            6,
            5,
            9,
            8,
            3,
            5,
            9,
            7,
            6,
            9,
            7,
            6,
            4,
            4,
            9,
            1,
            5,
            6,
            8,
            6,
            1,
            1,
            6,
            5,
            6,
            2,
            5,
            2,
            4,
            1,
            5,
            5,
            5,
            9,
            7,
            1,
            8,
            8,
            4,
            2,
            6,
            5,
            1,
            1,
            8,
            1,
            8,
            5,
            5,
            1,
            7,
            3,
            4,
            8,
            9,
            8,
            1,
            8,
            9,
            6,
            8,
            6,
            1,
            9,
            3,
            6,
            8,
            5,
            1,
            4,
            2,
            7,
            7,
            8,
            2,
            2,
            9,
            2,
            5,
            8,
            6,
            1,
            7,
            3,
            4,
            3,
            1,
            8,
            8,
            8,
            4,
            7,
            2,
            8,
            2,
            7,
            6,
            1,
            7,
            6,
            5,
            1,
            1,
            3,
            1,
            8,
            4,
            9,
            8,
            0,
            2,
            3,
            2,
            2,
            6,
            8,
            8,
            8,
            4,
            2,
            2,
            9,
            5,
            0,
            1,
            3,
            8,
            3,
            1,
            7,
            9,
            1,
            6,
            6,
            1,
            4,
            4,
            2,
            7,
            4,
            1,
            6,
            8,
            3,
            4,
            7,
            8,
            4,
            4,
            1,
            9,
            9,
            9,
            9,
            5,
            4,
            2,
            1,
            6,
            9,
            1,
            7,
            1,
            8,
            9,
            9,
            9,
            5,
            5,
            9,
            5,
            3,
            7,
            8,
            3,
            4,
            6,
            4,
            1,
            5,
            2,
            9,
            7,
            6,
            8,
            7,
            2,
            8,
            9,
            1,
            3,
            3,
            6,
            1,
            2,
            8,
            1,
            7,
            4,
            6,
            7,
            5,
            7,
            9,
            3,
            3,
            2,
            2,
            7,
            3,
            4,
            3,
            3,
            4,
            9,
            9,
            8,
            8,
            8,
            7,
            2,
            9,
            5,
            3,
            6,
            5,
            3,
            6,
            4,
            9,
            9,
            4,
            7,
            2,
            1,
            8,
            7,
            4,
            7,
            6,
            3,
            2,
            4,
            1,
            5,
            5,
            4,
            6,
            4,
            7,
            8,
            5,
            5,
            8,
            6,
            8,
            1,
            6,
            8,
            2,
            7,
            6,
            6,
            9,
            6,
            3,
            8,
            3,
            2,
            1,
            6,
            8,
            5,
            5,
            6,
            1,
            4,
            2,
            2,
            8,
            5,
            5,
            3,
            3,
            9,
            9,
            2,
            5,
            3,
            3,
            4,
            8,
            9,
            6,
            5,
            5,
            5,
            8,
            1,
            1,
            3,
            1,
            8,
            5,
            6,
            8,
            2,
            9,
            7,
            6,
            1,
            6,
            7,
            1,
            6,
            8,
            9,
            5,
            2,
            9,
            7,
            2,
            6,
            1,
            6,
            2,
            3,
            3,
            1,
            2,
            7,
            3,
            5,
            7,
            4,
            9,
            1,
            9,
            1,
            1,
            8,
            2,
            9,
            2,
            2,
            7,
            7,
            7,
            3,
            8,
            3,
            5,
            6,
            1,
            4,
            6,
            2,
            6,
            7,
            4,
            1,
            8,
            5,
            7,
            3,
            4,
            8,
            7,
            2,
            4,
            9,
            2,
            5,
            6,
            9,
            1,
            2,
            2,
            5,
            9,
            9,
            8,
            1,
            7,
            1,
            1,
            5,
            2,
            6,
            9,
            5,
            5,
            4,
            4,
            6,
            3,
            6,
            7,
            6,
            9,
            6,
            5,
            2,
            3,
            9,
            3,
            7,
            6,
            3,
            8,
            0,
            3,
            8,
            5,
            6,
            4,
            9,
            9,
            4,
            2,
            9,
            2,
            7,
            6,
            4,
            1,
            2,
            8,
            3,
            4,
            3,
            1,
            2,
            8,
            4,
            6,
            4,
            3,
            2,
            6,
            5,
            5,
            4,
            3,
            8,
            6,
            1,
            4,
            1,
            2,
            9,
            4,
            2,
            7,
            7,
            3,
            9,
            2,
            4,
            1,
            6,
            6,
            5,
            2,
            7,
            3,
            6,
            5,
            6,
            6,
            4,
            5,
            9,
            9,
            3,
            2,
            5,
            6,
            8,
            2,
            4,
            3,
            5,
            7,
            3,
            4,
            2,
            6,
            3,
            9,
            7,
            5,
            1,
            4,
            2,
            5,
            4,
            6,
            6,
            4,
            2,
            2,
            1,
            9,
            9,
            9,
            4,
            8,
            9,
            4,
            3,
            3,
            7,
            5,
            6,
            3,
            3,
            3,
            4,
            2,
            7,
            7,
            2,
            1,
            6,
            3,
            3,
            4,
            3,
            5,
            7,
            2,
            4,
            2,
            4,
            2,
            6,
            2,
            2,
            2,
            3,
            4,
            1,
            5,
            5,
            3,
            4,
            5,
            1,
            7,
            1,
            8,
            6,
            6,
            9,
            4,
            1,
            1,
            9,
            8,
            7,
            7,
            2,
            1,
            9,
            6,
            2,
            8,
            7,
            2,
            5,
            4,
            8,
            3,
            1,
            8,
            3,
            2,
            3,
            2,
            5,
            4,
            3,
            2,
            3,
            7,
            9,
            5,
            3,
            9,
            1,
            2,
            2,
            4,
            6,
            5,
            3,
            7,
            4,
            6,
            3,
            6,
            8,
            3,
            6,
            1,
            6,
            7,
            6,
            7,
            6,
            3,
            3,
            5,
            7,
            5,
            9,
            4,
            9,
            9,
            7,
            7,
            3,
            7,
            6,
            3,
            2,
            3,
            6,
            5,
            4,
            2,
            1,
            2,
            6,
            2,
            5,
            7,
            3,
            8,
            6,
            9,
            2,
            4,
            3,
            4,
            8,
            1,
            9,
            9,
            4,
            0,
            8,
            6,
            2,
            9,
            3,
            4,
            5,
            9,
            2,
            7,
            2,
            2,
            8,
            5,
            7,
            3,
            2,
            5,
            8,
            9,
            3,
            4,
            2,
            1,
            5,
            1,
            4,
            2,
            7,
            4,
            9,
            4,
            7,
            3,
            9,
            9,
            4,
            3,
            2,
            4,
            5,
            1,
            3,
            2,
            3,
            5,
            5,
            8,
            4,
            3,
            6,
            9,
            4,
            7,
            9,
            3,
            4,
            6,
            8,
            4,
            4,
            1,
            3,
            6,
            9,
            7,
            1,
            8,
            9,
            4,
            9,
            3,
            8,
            3,
            1,
            5,
            5,
            7,
            5,
            3,
            5,
            9,
            7,
            9,
            4,
            5,
            7,
            8,
            4,
            2,
            6,
            4,
            4,
            8,
            2,
            1,
            5,
            3,
            7,
            6,
            3,
            3,
            9,
            1,
            1,
            3,
            1,
            4,
            5,
            4,
            7,
            4,
            7,
            9,
            6,
            6,
            3,
            8,
            2,
            5,
            9,
            2,
            8,
            3,
            0,
            8,
            9,
            4,
            5,
            6,
            6,
            2,
            2,
            9,
            8,
            3,
            9,
            4,
            7,
            5,
            6,
            8,
            3,
            3,
            3,
            9,
            1,
            4,
            1,
            7,
            3,
            7,
            7,
            9,
            2,
            3,
            9,
            6,
            3,
            6,
            2,
            2,
            4,
            9,
            3,
            6,
            8,
            5,
            7,
            5,
            2,
            3,
            9,
            1,
            6,
            1,
            2,
            2,
            1,
            1,
            6,
            3,
            7,
            9,
            9,
            3,
            9,
            7,
            3,
            3,
            5,
            9,
            2,
            5,
            9,
            4,
            2,
            3,
            9,
            1,
            5,
            5,
            8,
            5,
            9,
            9,
            1,
            5,
            5,
            4,
            7,
            3,
            1,
            3,
            3,
            2,
            3,
            7,
            8,
            6,
            9,
            6,
            4,
            7,
            7,
            5,
            7,
            8,
            6,
            1,
            5,
            1,
            1,
            3,
            8,
            7,
            8,
            7,
            8,
            6,
            4,
            8,
            7,
            1,
            7,
            7,
            3,
            7,
            4,
            0,
            5,
            4,
            5,
            7,
            1,
            9,
            4,
            1,
            5,
            7,
            3,
            2,
            4,
            2,
            5,
            4,
            6,
            6,
            2,
            4,
            5,
            9,
            4,
            8,
            4,
            6,
            1,
            9,
            4,
            7,
            1,
            7,
            4,
            3,
            3,
            4,
            5,
            5,
            2,
            7,
            8,
            8,
            3,
            5,
            5,
            9,
            5,
            3,
            6,
            7,
            7,
            6,
            2,
            4,
            6,
            6,
            9,
            5,
            4,
            1,
            2,
            2,
            2,
            9,
            8,
            7,
            8,
            6,
            8,
            8,
            2,
            5,
            9,
            5,
            6,
            8,
            4,
            9,
            3,
            2,
            9,
            4,
            4,
            1,
            1,
            4,
            3,
            3,
            3,
            8,
            7,
            4,
            7,
            7,
            6,
            6,
            5,
            5,
            6,
            9,
            4,
            3,
            3,
            2,
            3,
            7,
            7,
            5,
            6,
            1,
            8,
            8,
            3,
            1,
            6,
            2,
            6,
            4,
            3,
            3,
            1,
            2,
            2,
            5,
            9,
            3,
            2,
            5,
            6,
            3,
            3,
            4,
            3,
            6,
            4,
            8,
            1,
            7,
            4,
            1,
            2,
            3,
            4,
            7,
            3,
            3,
            9,
            2,
            4,
            2,
            4,
            9,
            8,
            1,
            3,
            4,
            7,
            7,
            7,
            1,
            2,
            5,
            4,
            9,
            6,
            8,
            4,
            7,
            6,
            8,
            4,
            1,
            3,
            6,
            7,
            4,
            3,
            3,
            3,
            1,
            5,
            6,
            4,
            2,
            1,
            6,
            6,
            2,
            4,
            9,
            8,
            8,
            9,
            7,
            9,
            8,
            6,
            3,
            1,
            7,
            3,
            7,
            8,
            3,
            9,
            8,
            4,
            2,
            4,
            6,
            4,
            7,
            1,
            1,
            1,
            7,
            1,
            8,
            4,
            7,
            7,
            3,
            6,
            4,
            3,
            7,
            5,
            4,
            8,
            5,
            8,
            9,
            5,
            5,
            3,
            4,
            7,
            9,
            4,
            6,
            7,
            7,
            6,
            6,
            2,
            3,
            9,
            2,
            9,
            7,
            8,
            8,
            8,
            5,
            1,
            6,
            9,
            2,
            6,
            7,
            5,
            4,
            6,
            2,
            5,
            2,
            7,
            6,
            1,
            1,
            7,
            8,
            3,
            3,
            1,
            7,
            5,
            4,
            1,
            9,
            3,
            8,
            9,
            8,
            2,
            5,
            6,
            5,
            3,
            4,
            3,
            1,
            9,
            8,
            7,
            7,
            5,
            7,
            5,
            5,
            2,
            4,
            2,
            9,
            5,
            0,
            6,
            9,
            4,
            6,
            6,
            3,
            5,
            2,
            3,
            7,
            8,
            5,
            4,
            9,
            9,
            1,
            8,
            1,
            5,
            9,
            3,
            6,
            6,
            5,
            8,
            7,
            6,
            7,
            6,
            8,
            8,
            2,
            6,
            9,
            8,
            9,
            4,
            9,
            1,
            8,
            4,
            6,
            7,
            6,
            4,
            4,
            3,
            4,
            4,
            3,
            6,
            2,
            2,
            6,
            9,
            9,
            5,
            4,
            4,
            3,
            1,
            7,
            7,
            4,
            7,
            1,
            8,
            7,
            3,
            1,
            2,
            6,
            4,
            9,
            9,
            3,
            1,
            3,
            1,
            4,
            6,
            3,
            7,
            4,
            2,
            5,
            6,
            8,
            6,
            1,
            5,
            4,
            6,
            3,
            2,
            5,
            1,
            1,
            5,
            2,
            8,
            3,
            6,
            5,
            2,
            7,
            6,
            4,
            7,
            3,
            2,
            3,
            7,
            7,
            4,
            1,
            6,
            7,
            8,
            1,
            9,
            5,
            9,
            9,
            8,
            5,
            6,
            8,
            5,
            7,
            4,
            9,
            9,
            2,
            8,
            2,
            8,
            3,
            9,
            7,
            1,
            4,
            3,
            1,
            9,
            5,
            8,
            7,
            3,
            9,
            8,
            2,
            5,
            8,
            4,
            2,
            3,
            3,
            6,
            6,
            8,
            7,
            8,
            5,
            4,
            5,
            4,
            3,
            5,
            4,
            4,
            5,
            4,
            2,
            6,
            6,
            8,
            4,
            6,
            8,
            8,
            9,
            6,
            4,
            7,
            7,
            7,
            3,
            7,
            5,
            3,
            3,
            4,
            2,
            2,
            2,
            7,
            2,
            3,
            9,
            7,
            3,
            7,
            3,
            4,
            5,
            7,
            2,
            7,
            1,
            4,
            3,
            2,
            8,
            7,
            9,
            3,
            4,
            6,
            2,
            7,
            7,
            9,
            8,
            7,
            1,
            3,
            3,
            5,
            1,
            5,
            6,
            9,
            9,
            7,
            2,
            9,
            7,
            7,
            6,
            5,
            6,
            7,
            6,
            1,
            5,
            4,
            3,
            4,
            1,
            3,
            8
        ]

    for depot in depots:
        demand[depot] = 0
    constraint = \
        [
            975,
            925,
            1023,
            1046,
            883,
            1001,
            836,
            860,
            975
        ]
    selected_id = \
        [6818126, 13010802, 4076886, 25765424, 14575112, 22568574, 18472638, 7351349, 617406, 10515800, 15517195, 10529263, 12357775, 19348308, 3511206, 1881713, 18951005, 17767493, 26438789, 19305317, 6360535, 15168494, 24766312, 9695219, 23443319, 9047053, 12903742, 15299202, 5032875, 5078756, 11091429, 21042679, 22696247, 8199029, 21822027, 3209389, 19675241, 15284249, 20539478, 20534390, 20720736, 9112266, 1262663, 26634779, 14586383, 3947109, 8368630, 5303033, 22547192, 22918853, 16973632, 1503312, 14254583, 14527497, 12783574, 11608733, 21692770, 13875809, 8313577, 2364040, 8114876, 10892759, 16080244, 4492079, 24363376, 24857127, 12950668, 9777240, 20081687, 8959183, 21851473, 17884332, 11714572, 3600251, 11388236, 9486859, 23494804, 22963143, 18754514, 23398138, 7834500, 12963780, 18193210, 18407313, 16917968, 10524980, 8600515, 10798182, 14110399, 26350686, 17121747, 16245939, 13083464, 17390371, 17647835, 13406229, 11802918, 25734690, 24767240, 4497050, 12540943, 1101361, 25302459, 6779181, 16007654, 2442957, 10004539, 5608646, 19970762, 16123465, 13170675, 1157253, 24950959, 18156163, 11493457, 18159119, 2987395, 23420230, 22457925, 13452137, 12384608, 10136970, 1341144, 22739495, 2200920, 10403690, 2741383, 15237524, 10703968, 7719209, 21539515, 21802266, 17790104, 15859217, 4872787, 19581938, 21586514, 21944658, 1811425, 4931446, 4815877, 15174117, 10866118, 21907408, 6292292, 10961426, 877446, 10781187, 13192121, 9492589, 21786314, 15081699, 9397812, 12345815, 12102320, 7910698, 2092282, 19797028, 7812531, 24536608, 15031717, 12441902, 20098568, 15156015, 14428449, 8938695, 20235714, 5837742, 23745879, 6507241, 25689406, 2408276, 16277751, 149152, 3682836, 12813579, 23753718, 14893344, 14138538, 11051908, 26231733, 21741617, 16292634, 26521734, 7939848, 17260434, 13281827, 26000482, 17384221, 9774453, 4371068, 11233561, 16273911, 15343204, 5647846, 1293008, 26098584, 17900562, 7334167, 16283130, 22519583, 7295710, 22507826, 7564080, 16236492, 4044011, 17418901, 26593478, 2526532, 11967806, 3447261, 3997591, 2023273, 1498558, 24123201, 24286881, 5776979, 21880980, 8706495, 24300111, 25652436, 2768531, 14769824, 17481367, 7649369, 14945470, 284703, 22383033, 18394975, 9120610, 19273283, 23693407, 15385906, 9631790, 5673537, 20440534, 19539930, 9989410, 14766479, 6253567, 23021546, 25231228, 10633673, 2946701, 13072578, 9934437, 7431635, 14822061, 25469760, 25981657, 13755253, 6221443, 13814202, 3114210, 18494667, 14839530, 26130565, 6843530, 2815113, 12712677, 5293342, 1859889, 17339945, 6707127, 16874006, 4432913, 6828262, 21806791, 8582549, 15288911, 25324308, 3166922, 19139443, 3155568, 21910363, 190310, 754104, 25596038, 1533003, 7731452, 1796594, 15804007, 11938771, 6221010, 19085464, 13630462, 10998529, 16846213, 9907862, 25576180, 16713314, 13758916, 4301665, 3413724, 13148603, 22531276, 6702470, 7672411, 22850757, 26366144, 10473373, 2115185, 23153647, 18528254, 10654347, 25378060, 3500945, 26098885, 12211777, 8671600, 20686102, 12282654, 3980101, 620463, 3491887, 19794188, 5420367, 6538025, 3732755, 8569324, 20747910, 13017405, 19048341, 7422698, 7272675, 22825095, 18915442, 11292227, 7426686, 11632993, 20868264, 22129633, 2295256, 2878178, 15693472, 24797006, 24914005, 19248236, 7616514, 26494852, 17481509, 24617708, 14599145, 24666513, 15332766, 19003496, 18678781, 15655682, 17135610, 4497616, 1884724, 17269924, 2834227, 12719104, 4299971, 14289991, 25006607, 26180709, 22876436, 6918726, 9847883, 23351691, 20284127, 24233969, 2460286, 3323405, 3008237, 14834873, 4534603, 19632490, 283116, 10316830, 22929497, 12389743, 5810553, 25666992, 24624286, 14432568, 4749415, 13108436, 24058661, 11762011, 1110680, 20537333, 18954311, 8523052, 23196317, 6235979, 15235516, 2284141, 15162195, 12529843, 26625933, 21283271, 8005419, 15973078, 2295798, 8096759, 2124818, 12932145, 6159999, 24609849, 15636213, 25537128, 13025493, 417016, 20784590, 8941146, 3804150, 18514682, 15228484, 15106350, 3614201, 24918412, 9915887, 13828369, 1932557, 12722555, 19717092, 16865481, 18860665, 25472413, 6002363, 24742977, 10765635, 13760227, 10189893, 16485608, 3043101, 23174695, 24801350, 23504855, 13015809, 11067717, 17096952, 13421403, 18732990, 22306678, 6587230, 4353586, 9925350, 8959211, 18920788, 23500032, 17587911, 15038640, 24469367, 9284237, 3323256, 11177617, 3615629, 4359956, 21381879, 11359865, 13233986, 1334603, 18886053, 22286370, 11673238, 13740552, 18191595, 17264005, 20671889, 18497399, 15223488, 11384304, 9065220, 19077819, 3518260, 14758526, 20469441, 18394431, 10541495, 24269713, 19742167, 368476, 26337894, 26582461, 10281910, 4978783, 14007235, 1458361, 7434119, 10313820, 21719472, 22878241, 6578555, 10638749, 18648654, 3708565, 26457479, 19187059, 1883164, 9521863, 16912681, 20302680, 22382936, 2943613, 1881738, 24574440, 13115235, 9750662, 7896281, 16517595, 25380428, 1421241, 13332339, 16049543, 21335855, 9767058, 10285135, 8532432, 6800056, 24764121, 11354705, 26793713, 927096, 23498274, 12839345, 26640492, 5315036, 8054229, 21787982, 9268738, 771354, 19829673, 239027, 1757013, 3025220, 18186933, 3025004, 10306635, 5851552, 11041230, 23140299, 1577215, 2033405, 16326508, 6970699, 3755419, 5550035, 11772558, 4287485, 25211946, 5460769, 3301598, 9011332, 23740624, 26390545, 2036486, 11075814, 5089580, 13447120, 10415560, 5979912, 21297478, 22024277, 1476750, 23338909, 3734084, 16874548, 7833957, 21878356, 24349485, 22504445, 13559932, 16112236, 23579727, 26785371, 19374747, 1975910, 4665301, 14599431, 8117954, 10296565, 24220740, 18254608, 19167595, 17187812, 6020141, 18326549, 25224408, 12028167, 13059274, 2313702, 17664522, 25592341, 26152627, 25612738, 13256475, 21458911, 10324927, 9350064, 19605829, 7103603, 22923501, 20502136, 10409172, 10140049, 11550005, 25801118, 8474702, 18642452, 1284399, 24208903, 16528773, 2577441, 19777500, 5598755, 2733845, 23186102, 7652643, 9325944, 5222763, 17024526, 5453925, 10939577, 6142969, 24330540, 20957600, 23123259, 25501896, 18626275, 13230837, 10053071, 20351176, 24508534, 26406916, 26778913, 25727632, 2745884, 25509807, 1867376, 13710288, 24038105, 24685368, 2527687, 16555302, 21493758, 23859109, 7631564, 6947749, 21221135, 18674855, 4297212, 22866105, 7234587, 17188241, 13602567, 2433953, 2919448, 14449863, 4522878, 21711724, 23188655, 25932662, 4910949, 22327916, 17594291, 533530, 22928422, 23008922, 525148, 17500916, 2859774, 22703149, 12175157, 9710460, 15921934, 25621527, 11394965, 10084919, 23537803, 5217539, 2812244, 16422302, 10366164, 1654528, 16105776, 7631394, 13067144, 8285437, 19051717, 26284429, 6881320, 19342696, 23933083, 15223489, 16673085, 17123482, 23475972, 2988566, 26348223, 10821393, 9271542, 11544209, 20504713, 13507794, 18730052, 12798858, 7597849, 20375876, 11448823, 6034974, 25723656, 21331009, 20143684, 14612943, 2168078, 3537070, 24280472, 15782423, 20954825, 10591812, 2881005, 4270875, 8348114, 13595259, 23977755, 782952, 5453638, 17325937, 22293517, 9933243, 21624354, 21016169, 19051964, 6465255, 503329, 25829342, 12796339, 20972727, 15874597, 25688113, 19971005, 15677247, 3017826, 15099393, 23426989, 10083214, 6255542, 1994206, 4691384, 19716976, 82437, 17846814, 13178913, 1005240, 5354189, 20335770, 20762649, 2674856, 24112427, 7098821, 24046276, 18023746, 19488240, 3882440, 19831378, 17889632, 18143883, 22232114, 102353, 16432613, 5090531, 118193, 23250408, 24727601, 4848473, 12564033, 16863971, 22355815, 12732725, 9996540, 24382625, 22167440, 7316733, 20219755, 11945972, 14446048, 21478136, 3384691, 16134338, 25855198, 12202360, 11695398, 14269291, 17438350, 4795934, 15960430, 3069398, 1750808, 26076130, 17848004, 7852941, 12824833, 12724576, 11932028, 64407, 26713084, 14911859, 10922904, 4317879, 26523269, 7820898, 19853524, 21422177, 7685625, 6188565, 8323778, 13157965, 16685678, 12719855, 22610516, 11754464, 3633305, 21112560, 25103514, 16666313, 13169119, 18270623, 20353270, 7568685, 26301436, 18893191, 8093221, 18629914, 21079607, 18712866, 22947799, 24609171, 2633021, 17294143, 10435596, 6181190, 21062945, 22770799, 11493383, 24074084, 20769158, 4185255, 14911685, 13927365, 6357697, 12263322, 6339113, 3689474, 3707388, 5674842, 5425619, 20798368, 17634507, 25700283, 22701264, 11319353, 11240888, 6306587, 3255092, 14525265, 15211097, 6323601, 13924779, 7151517, 11185948, 11055799, 11276674, 20283876, 11341434, 6359881, 10126697, 5122380, 23362054, 9006378, 17751370, 3348799, 7127435, 6524553, 19259350, 9918471, 14747577, 741941, 4811855, 8369984, 1627350, 2924438, 20436496, 17074641, 14894037, 314662, 19289680, 9236189, 22135261, 15328734, 18265812, 13198647, 13558743, 8020767, 6974225, 7005738, 10003973, 9535550, 14155636, 7240836, 15505246, 20860, 25338894, 22859894, 11016032, 21929247, 15201279, 26335318, 19247367, 3436144, 16364805, 25787070, 25224194, 5866331, 5845427, 12925997, 4766902, 11116808, 25317544, 25624177, 13172626, 16640305, 11697521, 10562175, 3634283, 26150783, 4962469, 17189164, 3847938, 8444754, 23680058, 175644, 7159072, 5814753, 4800882, 9355481, 23120594, 26689979, 23409249, 9690584, 11983314, 7519137, 11211765, 16732621, 13936475, 17842761, 13818957, 14206208, 5645018, 19121402, 12194118, 17670015, 7440797, 2013453, 16317562, 11064475, 16126533, 12647817, 24926054, 2672873, 11484112, 16854706, 25393621, 1173551, 2468161, 9385391, 2231563, 18347939, 6090122, 2955645, 26684617, 13479133, 25661261, 20876741, 6489135, 14168834, 20832765, 1259944, 24448410, 21376361, 18948822, 4558996, 20649055, 25701518, 25534213, 18476770, 4755644, 20651399, 11605117, 3442746, 11616777, 9900698, 26068121, 16666543, 10361246, 13597618, 17912743, 5843043, 5301609, 6439959, 12156698, 25383117, 7984176, 11291538, 14857494, 22308287, 3099395, 15317131, 24721652, 23042994, 1524283, 19831984, 12463682, 25635477, 26264245, 23930853, 18851732, 13016660, 18953554, 20982234, 5617245, 24426241, 12248964, 3009472, 13802422, 15914366, 7025116, 5513418, 26390920, 19945970, 23331881, 22011395, 10776521, 10368318, 22797424, 14661406, 12370989, 12887294, 8209443, 25900210, 3407800, 3544543, 1107912, 470514, 15730696, 15300686, 4583628, 5895279, 11045211, 7476364, 25300561, 4409005, 9898989, 9742270, 17592088, 12667175, 14126202, 14345901, 7512248, 23006750, 5323719, 26118554, 23493313, 11052465, 16724188, 6663892, 6119405, 14133976, 5091365, 5297800, 26703898, 4570568, 16722110, 4428009, 23986081, 15993987, 11230720, 5324999, 3587542, 23360064, 21440816, 12721399, 4009973, 17575649, 12465563, 15063228, 19379391, 23790715, 11215024, 9006541, 8417714, 22889140, 24649286, 22294848, 9158601, 18378642, 19782990, 12635420, 2093126, 12074850, 5500748, 17106315, 4866800, 3246645, 5683279, 1592659, 7200785, 3710911, 20867299, 18928054, 5023286, 266330, 8517332, 10692703, 26010070, 3789905, 21822739, 7023165, 1160322, 12456935, 10022982, 20337330, 23999450, 13729995, 20422707, 7563761, 10304901, 11390509, 3093789, 14209680, 18393472, 14249202, 15426545, 10741900, 24208363, 11935092, 5932444, 3265368, 18169921, 20185840, 4544740, 10405606, 21298829, 3232270, 8028347, 9086777, 4772266, 15297426, 1762022, 11204896, 11091674, 25144729, 16975478, 6291063, 12966909, 10112370, 13927103, 3292930, 14479028, 3748512, 12897988, 18929541, 5181779, 20029978, 8349839, 6112658, 4669831, 17930362, 285723, 2781662, 23587739, 3327826, 8869951, 24607129, 11764397, 18826947, 24667434, 12611463, 19913361, 14067339, 11094995, 8216052, 20770602, 651508, 6640857, 16389962, 214171, 6968342, 1748707, 12983367, 25596670, 2215824, 2993707, 17133259, 24593329, 5775064, 19771830, 23344247, 19724245, 8325023, 22005968, 21754104, 19156398, 14682543, 7829634, 5614417, 17068362, 19384529, 251871, 7014760, 4071983, 456517, 19643437, 16630740, 23028451, 5694965, 25223508, 19566380, 11747926, 1704310, 23788043, 3556986, 18923405, 12489518, 12810507, 4053660, 1710227, 13966214, 25714035, 3638292, 1576821, 25334061, 7324804, 18356430, 7613964, 25962429, 18835391, 17170204, 3477960, 15007747, 130180, 6473741, 8815204, 5394843, 17280289, 11393332, 13084010, 11179893, 26692113, 18564390, 15476734, 25925568, 17640980, 20775427, 16783940, 25712937, 16199905, 6846715, 20575052, 7525418, 11027371, 23386556, 24543088, 4317276, 1746868, 3159781, 503247, 2966857, 13870346, 4362154, 898899, 16428909, 21343344, 22113202, 5151658, 4531900, 25834565, 19753923, 25842591, 1167585, 12647736, 23070156, 22480446, 26568027, 9891260, 20488391, 20688859, 17604846, 22677508, 22567627, 16239952, 22349658, 11811731, 12507847, 5863484, 1696936, 5533542, 11608950, 1411635, 25662372, 21890975, 6035368, 12397776, 16136806, 5339542, 23237788, 23274428, 26795201, 3837860, 4950005, 7430859, 18457602, 2087675, 21813355, 8531739, 2688558, 2752049, 20231296, 9477587, 21348299, 23195836, 17854592, 12131143, 24687426, 2279, 18409871, 25702742, 22396518, 21656788, 26483412, 7923109, 20499221, 5429118, 26801644, 19853130, 23782374, 24471435, 6558780, 5322832, 26171017, 2678365, 17968993, 1981256, 10438529, 13033025, 10149217, 11786004, 400765, 895330, 13013998, 16345413, 4859140, 8899037, 24960364, 14710607, 10305637, 12893610, 9973687, 9056040, 14835850, 1927990, 22864887, 1505464, 6504513, 12938784, 17230067, 17801859, 25055814, 4282, 22129171, 25595297, 22082635, 15203411, 5644444, 24658334, 9158279, 2280029, 19064684, 13740857, 24959919, 3274589, 10719217, 12022157, 5360052, 24668262, 894216, 25957014, 26180314, 18866822, 8621098, 14218231, 6096539, 19866764, 14152120, 20291590, 19500891, 23827136, 14672584, 23558798, 76151, 8110133, 15448244, 800059, 5655119, 3452684, 8300146, 14154407, 21855371, 32964, 9790875, 6911182, 24635761, 3496033, 3259786, 8695131, 3685922, 2603003, 22602616, 12266105, 8621912, 19842289, 9320800, 17160011, 25722295, 17602259, 25842194, 5864513, 24142707, 3322743, 12175746, 11854726, 16981360, 15005692, 22991818, 26185880, 18926381, 17203077, 13574757, 3489692, 25453382, 21829692, 24484932, 4661746, 24711602, 14987677, 6367717, 5253317, 19147089, 17708068, 9418450, 451340, 26514687, 6484675, 21657546, 18721017, 12764049, 383996, 17120653, 7627538, 12281659, 25104301, 13891803, 7346155, 5426898, 6914785, 12163435, 23251894, 24155396, 17468422, 3591864, 5054646, 11393820, 26178625, 12950988, 22914192, 10737820, 2010464, 220929, 12013709, 2290734, 14006954, 18034005, 11923873, 9211148, 26503290, 24304096, 15049253, 1894656, 6180079, 3147683, 18669073, 21507994, 654682, 16742196, 10662035, 5245994, 3674677, 24667910, 8784746, 16291085, 2137523, 23581721, 15773539, 8946201, 21754870, 862144, 25815877, 22581805, 11956682, 25368158, 7854995, 17117222, 12999675, 2471967, 11458736, 201228, 16223511, 18834337, 9895410, 8947062, 18634231, 9727951, 17631619, 19891101, 16659620, 7465973, 21596059, 26020285, 16034365, 20609550, 10839905, 5005764, 22940991, 16801097, 8813954, 22141285, 1082544, 6019072, 6100900, 2121261, 14738210, 841487, 6373401, 11609113, 20838414, 921496, 1278841, 11870411, 17915035, 15348468, 14622782, 5784942, 24155316, 21137771, 17253076, 7905701, 19311133, 22502393, 20988155, 8832634, 21950780, 1979908, 8595820, 7447005, 44751, 13907222, 20755832, 8736384]

    test_problem = GraphV2ProblemMultiConstrained(
        problem_type="Metric cmTSP",
        n_nodes=n_nodes,
        selected_ids=selected_id,
        cost_function="Geom",
        dataset_ref="Asia_MSB",
        n_salesmen=m,
        depots=depots,
        single_depot=False,
        demand=demand,
        constraint=constraint
    )
    test_problem.edges, node_coords = mock.recreate_edges(test_problem)

    print("depots", depots)
    print("constraints", constraint, sum(constraint), n_nodes, sum(constraint) >= n_nodes)

    # Run Hexaly solver
    print("Running HexalyMultiSolver")
    solver = HexalyMultiSolver(problem_types=[test_problem], time_limit=180)
    start_time = time.time()
    routes = asyncio.run(solver.solve_problem(test_problem))
    test_synapse = GraphV2Synapse(problem=test_problem, solution=routes)
    score = get_multi_minmax_tour_distance(test_synapse)

    print(f"Hexaly Time Taken for {n_nodes} Nodes: {time.time() - start_time} and Salesmen: {m}")
    print(f"Hexaly scored: {score}")
    print("len of Hexaly routes", [len(route) for route in routes])
    [print(route) for route in routes]

    plt = visualize_mdcvrp(node_coords, depots, routes, title="Hexaly Solution")
    plt.show()

    best_routes = \
        [[9, 210, 992, 1497, 14, 1419, 1081, 1111, 109, 506, 714, 368, 99, 536, 1119, 1110, 1080, 1063, 544, 829, 1390,
          1215, 1341, 1480, 1307, 877, 518, 311, 1462, 12, 890, 718, 161, 1143, 1404, 1131, 926, 468, 953, 1531, 201,
          1144, 1186, 364, 1395, 2, 1333, 1213, 788, 665, 906, 1093, 1292, 527, 202, 1108, 1166, 224, 883, 1329, 1436,
          630, 700, 640, 679, 747, 591, 1067, 1516, 1521, 142, 87, 996, 300, 509, 264, 242, 128, 313, 105, 236, 1220,
          371, 818, 125, 1384, 269, 624, 1047, 1158, 414, 245, 723, 440, 878, 1136, 111, 469, 1548, 938, 592, 1452, 225,
          85, 1079, 126, 609, 751, 1343, 962, 1360, 994, 1061, 106, 237, 773, 1123, 523, 48, 529, 732, 1275, 462, 560,
          310, 965, 1496, 1468, 78, 360, 594, 1055, 1085, 154, 67, 121, 439, 1552, 582, 1170, 943, 1133, 299, 1449, 117,
          1003, 593, 1565, 86, 1348, 1455, 598, 427, 426, 867, 189, 616, 175, 1270, 1130, 1138, 1241, 9],
         [44, 465, 370, 458, 1221, 814, 88, 514, 1418, 1051, 907, 550, 960, 759, 1249, 583, 1, 1352, 964, 1157, 81,
          1409, 304, 62, 1201, 693, 1154, 1129, 1035, 52, 1263, 1239, 171, 334, 625, 23, 281, 333, 352, 666, 472, 801,
          478, 1478, 676, 706, 288, 1553, 899, 739, 395, 869, 537, 659, 597, 1495, 169, 155, 1465, 931, 1311, 312, 45,
          757, 182, 696, 1250, 449, 424, 61, 191, 1314, 574, 379, 1075, 942, 1048, 1524, 1291, 507, 1346, 192, 1152,
          1293, 1481, 383, 854, 120, 433, 1261, 864, 147, 329, 779, 1517, 501, 39, 1036, 967, 483, 670, 474, 492, 11,
          713, 695, 510, 271, 997, 140, 1188, 691, 1195, 1562, 15, 498, 159, 1420, 1379, 1387, 1560, 853, 349, 102, 103,
          1053, 143, 268, 260, 860, 982, 590, 1096, 131, 522, 150, 267, 1507, 1234, 1310, 948, 152, 187, 504, 1042, 921,
          71, 1089, 43, 1434, 423, 727, 145, 382, 340, 1492, 954, 132, 1121, 603, 1509, 44],
         [220, 1441, 1483, 1557, 1393, 1247, 185, 998, 1150, 391, 847, 489, 823, 1087, 1112, 768, 153, 1104, 1514, 57,
          949, 1285, 480, 127, 1027, 1069, 252, 399, 548, 1477, 320, 485, 1064, 256, 1191, 690, 701, 966, 1193, 856,
          1073, 1117, 995, 319, 420, 386, 1450, 1338, 1082, 642, 18, 446, 750, 1410, 331, 602, 1487, 626, 604, 137,
          1345, 1563, 562, 168, 631, 457, 1371, 1538, 104, 1196, 682, 1374, 761, 284, 343, 1179, 1190, 1219, 1377, 1414,
          1326, 376, 1037, 944, 1091, 97, 456, 65, 1508, 567, 1265, 1010, 183, 519, 1444, 981, 1555, 1470, 430, 3, 922,
          726, 1287, 862, 412, 290, 811, 1431, 1525, 831, 1118, 870, 1471, 798, 749, 1473, 989, 46, 1257, 649, 505, 29,
          1062, 930, 1429, 809, 32, 1510, 306, 351, 215, 298, 557, 16, 1327, 1113, 1289, 357, 1019, 335, 767, 1083,
          1467, 336, 345, 303, 1442, 33, 897, 445, 294, 1095, 1137, 672, 8, 464, 1463, 24, 231, 817, 830, 872, 428, 348,
          979, 1109, 1399, 1529, 1437, 934, 660, 520, 1002, 1376, 1105, 1535, 206, 92, 318, 559, 988, 1283, 1505, 1145,
          1322, 166, 1320, 212, 437, 454, 186, 1394, 564, 1549, 1171, 1499, 362, 974, 742, 207, 688, 842, 588, 513, 780,
          346, 1028, 678, 220],
         [234, 888, 715, 1567, 77, 1511, 1453, 101, 1388, 740, 1026, 763, 366, 28, 758, 265, 551, 1071, 764, 1422, 1392,
          259, 481, 1058, 1100, 172, 1447, 372, 729, 728, 289, 904, 652, 1045, 615, 1235, 571, 1094, 1125, 354, 1363,
          396, 1520, 1218, 600, 1103, 243, 406, 1405, 1350, 524, 1544, 975, 1401, 68, 146, 662, 1554, 1165, 958, 173,
          198, 1351, 405, 1566, 63, 709, 1415, 415, 1541, 1299, 1016, 721, 1065, 517, 76, 1151, 443, 431, 570, 1336,
          540, 276, 416, 1054, 141, 1210, 936, 64, 27, 1139, 1259, 1309, 262, 1162, 838, 1430, 563, 473, 787, 204, 896,
          116, 790, 1174, 214, 203, 1128, 1160, 1513, 643, 794, 852, 874, 674, 986, 1172, 467, 1570, 380, 1278, 832,
          1164, 703, 190, 1269, 246, 422, 217, 332, 491, 650, 292, 636, 1459, 905, 685, 539, 1148, 1238, 1208, 475,
          1304, 532, 1000, 209, 1359, 1256, 1297, 632, 1273, 677, 321, 919, 577, 1178, 138, 230, 914, 894, 162, 13, 337,
          1272, 1009, 451, 1030, 812, 822, 1330, 1301, 802, 1236, 50, 1155, 487, 1057, 840, 1425, 542, 970, 1228, 1559,
          266, 606, 1203, 1206, 254, 1207, 477, 512, 644, 1034, 1008, 1262, 880, 1266, 1223, 1550, 1146, 1545, 0, 634,
          413, 1446, 1411, 516, 1060, 272, 234],
         [521, 663, 51, 325, 1364, 328, 978, 208, 1189, 232, 704, 1014, 525, 1032, 108, 26, 1098, 455, 889, 157, 971,
          980, 53, 247, 238, 342, 1001, 667, 47, 879, 124, 401, 1506, 668, 222, 585, 1501, 820, 1537, 1451, 1194, 40,
          893, 447, 969, 255, 493, 1315, 84, 741, 1298, 1086, 233, 1357, 75, 486, 561, 576, 1134, 612, 651, 859, 377,
          900, 968, 972, 736, 1412, 1362, 918, 4, 151, 42, 178, 1396, 355, 164, 836, 629, 1124, 605, 1230, 1423, 1526,
          1337, 805, 1296, 769, 1015, 1368, 786, 1543, 461, 211, 596, 235, 1334, 1049, 495, 470, 1127, 866, 1397, 448,
          365, 417, 490, 285, 1454, 1280, 803, 1440, 795, 195, 1224, 94, 789, 403, 1255, 851, 291, 459, 1381, 250, 425,
          82, 633, 136, 1140, 957, 1539, 17, 373, 244, 221, 565, 552, 1141, 1407, 720, 1180, 844, 923, 648, 1204, 305,
          1084, 754, 610, 1458, 353, 308, 1369, 410, 1286, 393, 581, 915, 543, 314, 575, 356, 861, 1400, 174, 1216, 199,
          1059, 165, 83, 1328, 782, 1306, 940, 497, 515, 1161, 21, 521],
         [762, 1007, 374, 385, 177, 59, 653, 56, 167, 378, 916, 1115, 1530, 711, 1353, 885, 1090, 775, 579, 1168, 950,
          511, 1244, 387, 251, 283, 946, 845, 1274, 123, 637, 1489, 253, 1267, 1070, 170, 733, 1540, 1319, 1240, 554,
          119, 614, 1432, 188, 49, 1258, 1231, 1503, 1041, 1569, 1498, 708, 463, 744, 1361, 1181, 1211, 1519, 735, 580,
          347, 1316, 344, 1192, 419, 858, 1417, 444, 1076, 1443, 1276, 130, 1198, 218, 528, 951, 1072, 848, 402, 608,
          1464, 1568, 1484, 755, 392, 1426, 1366, 1271, 1126, 947, 1182, 1199, 927, 815, 694, 502, 1558, 25, 1490, 35,
          488, 955, 956, 1135, 937, 10, 719, 158, 98, 1175, 309, 277, 601, 229, 932, 436, 1372, 1043, 394, 7, 184, 1493,
          1551, 1403, 435, 549, 698, 804, 350, 1564, 181, 819, 828, 398, 359, 69, 1243, 984, 1461, 1288, 226, 933, 1522,
          526, 1542, 297, 586, 1132, 1245, 891, 1340, 270, 460, 1233, 1013, 36, 791, 901, 530, 278, 628, 1005, 22, 338,
          760, 80, 1159, 627, 375, 1023, 1302, 573, 572, 762],
         [887, 1367, 587, 595, 1107, 772, 699, 1260, 1088, 796, 1378, 89, 1528, 1500, 671, 133, 1290, 756, 658, 881,
          857, 1383, 163, 743, 418, 1416, 655, 389, 1254, 707, 408, 1427, 144, 834, 239, 783, 1227, 863, 1039, 1122,
          1305, 1232, 589, 987, 135, 1229, 1433, 301, 843, 93, 752, 797, 1385, 1020, 1325, 1102, 1101, 1251, 784, 315,
          19, 1226, 607, 778, 745, 194, 1413, 1512, 850, 1156, 100, 873, 913, 1281, 91, 1428, 1279, 113, 1491, 110, 810,
          1183, 1406, 20, 868, 1011, 1421, 793, 1472, 1355, 275, 258, 1222, 96, 1485, 400, 390, 54, 730, 617, 367, 681,
          724, 95, 1253, 160, 722, 578, 58, 404, 689, 1149, 500, 90, 1163, 683, 705, 1038, 205, 1475, 1202, 697, 1439,
          115, 282, 777, 248, 973, 692, 645, 808, 770, 999, 1476, 197, 1153, 1344, 1142, 886, 66, 476, 1347, 1515, 148,
          324, 623, 434, 70, 1317, 884, 407, 60, 1167, 223, 647, 323, 1460, 882, 1408, 73, 1479, 432, 479, 1448, 641,
          176, 737, 1375, 898, 917, 228, 471, 261, 792, 196, 307, 1342, 887],
         [1012, 534, 1021, 1217, 273, 753, 1187, 1044, 339, 411, 638, 1494, 569, 833, 1445, 442, 326, 1438, 213, 1225,
          664, 621, 1017, 1050, 952, 911, 482, 1313, 566, 876, 438, 317, 535, 1502, 908, 1052, 466, 909, 841, 72, 279,
          1242, 1435, 494, 1398, 716, 134, 156, 30, 107, 216, 639, 118, 556, 1209, 322, 1303, 249, 450, 765, 1277, 657,
          1018, 1294, 807, 771, 34, 496, 295, 227, 112, 1356, 409, 776, 361, 1264, 1469, 902, 302, 369, 1185, 910, 1004,
          1077, 686, 1370, 1380, 985, 1120, 687, 941, 661, 813, 738, 79, 484, 538, 635, 961, 799, 928, 734, 1212, 358,
          240, 1332, 274, 1518, 1523, 293, 684, 555, 1391, 781, 384, 241, 1200, 545, 38, 1029, 1402, 1373, 1456, 1488,
          983, 669, 774, 710, 1389, 618, 1532, 1339, 935, 547, 1025, 584, 1214, 508, 1324, 280, 568, 1046, 646, 421,
          363, 839, 1197, 341, 1176, 1024, 499, 871, 1323, 990, 429, 1382, 1457, 654, 1033, 766, 558, 1504, 1308, 824,
          1173, 939, 620, 1106, 1282, 1284, 1012],
         [1318, 826, 1547, 1365, 1147, 1331, 397, 825, 622, 746, 122, 1252, 1184, 1056, 725, 837, 296, 1068, 748, 316,
          849, 1335, 1466, 1246, 977, 1205, 821, 1386, 920, 263, 452, 806, 656, 1312, 139, 74, 731, 827, 1561, 619, 31,
          976, 816, 929, 613, 712, 945, 1546, 1300, 835, 1022, 855, 5, 892, 1116, 1358, 673, 959, 1534, 925, 785, 912,
          702, 963, 1533, 286, 55, 1074, 381, 219, 1169, 1295, 991, 533, 1066, 179, 1031, 1536, 924, 200, 1527, 1040,
          287, 6, 875, 388, 503, 865, 1248, 1474, 453, 599, 1556, 193, 1354, 541, 1177, 327, 895, 1006, 903, 257, 680,
          1099, 531, 553, 546, 1321, 1424, 1097, 1349, 441, 1482, 149, 675, 1486, 1268, 180, 1092, 330, 1078, 993, 717,
          41, 37, 800, 1114, 114, 611, 129, 846, 1237, 1318]]

    print("Best solve NNMS3")
    best_synapse = GraphV2Synapse(problem=test_problem, solution=best_routes)
    score2 = get_multi_minmax_tour_distance(best_synapse)
    print(f"Best scored: {score2}")
    plt = visualize_mdcvrp(node_coords, depots, best_routes, title="best sol")
    plt.show()

